@page "/tickets"
@inject ITicketServiceClient TicketService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject ILogger<Tickets> Logger
@using System.Security.Claims
@using RequestHub.Shared
@using Blazorise.DataGrid
@using Blazorise
@using Blazorise.Bootstrap



<html>
<head>
	<PageTitle>Tickets</PageTitle>
</head>

<body>
	<header>
			<h1>Tickets</h1>
	</header>
	<main>
		@if (isLoading)
		{
			<h2 class="loading">Loading Tickets...</h2>
		}
		else
		{
			<DataGrid TItem="Ticket" Data="@TicketService.Tickets" Sortable="true" Filterable="true" Editable="true" ShowPager="true" PageSize="10">


				<DataGridCommandColumn TItem="Ticket">
					<EditCommandTemplate>
						@if (authorized)
						{
							<Blazorise.Button Color="Color.Secondary" Type="ButtonType.Link" To="@($"ticketmanagement/{context.Item.Id}")">Edit</Blazorise.Button>
						}

					</EditCommandTemplate>
					<NewCommandTemplate>
						<Blazorise.Button Color="Color.Success" Clicked="() => CreateNewTicket()">New</Blazorise.Button>
					</NewCommandTemplate>
					<DeleteCommandTemplate>
						@*Keep this Empty*@
					</DeleteCommandTemplate>
					<ClearFilterCommandTemplate>
						<Blazorise.Button Color="Color.Info" Clicked="context.Clicked">Clear Filter</Blazorise.Button>
					</ClearFilterCommandTemplate>
				</DataGridCommandColumn>

				<DataGridColumn TItem="Ticket" Field="@nameof(Ticket.User.RequestorName)" Caption="Requestor Name" Editable="true" />
				<DataGridColumn TItem="Ticket" Field="@nameof(Ticket.EquipmentName)" Caption="Equipment Name" Editable="true" />
				<DataGridColumn TItem="Ticket" Field="@nameof(Ticket.Description)" Caption="Description" Editable="true" />
				<DataGridColumn TItem="Ticket" Field="@nameof(Ticket.IsValid)" Caption="IsValid" Editable="true" />
				<DataGridColumn TItem="Ticket" Field="@nameof(Ticket.Timestamp)" Caption="Request Date" Editable="true" />
				<DataGridColumn TItem="Ticket" Field="@nameof(Ticket.Department.DepartmentName)" Caption="Department Name" Editable="true" />
				<DataGridColumn TItem="Ticket" Field="@nameof(Ticket.SiteLocation.Name)" Caption="Site Location" Editable="true" />
				<DataGridColumn TItem="Ticket" Field="@nameof(Ticket.Comment)" Caption="Controls/IT Comments" Editable="true" />
				


			</DataGrid>
		}
	</main>
</body>
</html>



@code {


	//initialize list to display on dropdown menus
	private List<Department> departments = new List<Department>();
	private List<SiteLocation> siteLocations = new List<SiteLocation>();
	private List<User> users = new List<User>();


	Ticket ticket = new Ticket
		{
			//The rest of the fields are bound in the handle submit form and is why they do not show up here.
			Department = new Department(),
			User = new User(),
			SiteLocation = new SiteLocation(),


		};


	bool authorized = false;//Role Authentication

	bool isLoading = true;


	protected override async Task OnInitializedAsync()
	{


		try
		{
			//to ceate a ticket we need to load associated data
			await TicketService.GetTickets();
			departments = await TicketService.GetDepartments();
			siteLocations = await TicketService.GetSiteLocations();
			users = await TicketService.GetUsers();

			//Role Authentication
			var authState = await AuthStateProvider.GetAuthenticationStateAsync();
			if (authState?.User != null)
			{
				string role = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value;
				if (!string.IsNullOrEmpty(role) && role.Contains("Admin"))
				{
					authorized = true;
				}
			}

			//check if tickets were loaded 
			if (TicketService.Tickets == null || !TicketService.Tickets.Any())
			{
				throw new Exception("No tickets were loaded.");
			}

			//Data is loaded, set isLoading to false 
			isLoading = false;
		}
		catch(Exception ex)
		{
			// Handle any exceptions here, and set isLoading to false in case of an error
			isLoading = false;
		}



	}


	protected override async Task OnParametersSetAsync()
    {
		//initialize the ticket with the first department, user , and site location in the list
		ticket.Department = departments[0];
		ticket.DepartmentId = ticket.Department.Id;
		ticket.User = users[0];
		ticket.UserId = ticket.User.Id;
		ticket.SiteLocation = siteLocations[0];
		ticket.SiteLocationId = ticket.SiteLocation.Id;
    }



	async Task EditTicket(int updateTicketId)
	{
		NavigationManager.NavigateTo($"ticketmanagement/{updateTicketId}");
	}

	async Task CreateNewTicket()
	{


		var newTicket = await TicketService.CreateTicket(ticket);

		NavigationManager.NavigateTo($"/ticketmanagement/create/{newTicket.Id}");


		// try
		// {
		// 	//fetch the next available ticket id
		// 	var tickets = await TicketService.GetTickets();
		// 	Logger.LogInformation($"Ticket.razor: ticket count: {tickets.Count}");
		// 	if (tickets.Any())
		// 	{
		// 		nextTicketId = tickets.Max(t => t.Id) + 1;

		// 		NavigationManager.NavigateTo($"/ticketmanagement/create/{nextTicketId}");
		// 	}
		// 	// else
		// 	// {
		// 	// 	NavigationManager.NavigateTo($"/ticketmanagement/create/{nextTicketId}");
		// 	// }
		// }
		// catch (Exception ex)
		// {
		// 	throw new Exception($"No tickets are available to fetch: {ex}");
		// }

	}

	
	

	





}




